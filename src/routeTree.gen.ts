/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MotionRouteImport } from './routes/motion'
import { Route as LoginRouteImport } from './routes/login'
import { Route as JobsRouteImport } from './routes/jobs'
import { Route as DataRouteImport } from './routes/data'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as JobsJobIdRouteImport } from './routes/jobs.$jobId'

const MotionRoute = MotionRouteImport.update({
  id: '/motion',
  path: '/motion',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsRoute = JobsRouteImport.update({
  id: '/jobs',
  path: '/jobs',
  getParentRoute: () => rootRouteImport,
} as any)
const DataRoute = DataRouteImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const JobsJobIdRoute = JobsJobIdRouteImport.update({
  id: '/$jobId',
  path: '/$jobId',
  getParentRoute: () => JobsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/data': typeof DataRoute
  '/jobs': typeof JobsRouteWithChildren
  '/login': typeof LoginRoute
  '/motion': typeof MotionRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/data': typeof DataRoute
  '/jobs': typeof JobsRouteWithChildren
  '/login': typeof LoginRoute
  '/motion': typeof MotionRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/data': typeof DataRoute
  '/jobs': typeof JobsRouteWithChildren
  '/login': typeof LoginRoute
  '/motion': typeof MotionRoute
  '/jobs/$jobId': typeof JobsJobIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/data'
    | '/jobs'
    | '/login'
    | '/motion'
    | '/jobs/$jobId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/data' | '/jobs' | '/login' | '/motion' | '/jobs/$jobId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/data'
    | '/jobs'
    | '/login'
    | '/motion'
    | '/jobs/$jobId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  DataRoute: typeof DataRoute
  JobsRoute: typeof JobsRouteWithChildren
  LoginRoute: typeof LoginRoute
  MotionRoute: typeof MotionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/motion': {
      id: '/motion'
      path: '/motion'
      fullPath: '/motion'
      preLoaderRoute: typeof MotionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs': {
      id: '/jobs'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data': {
      id: '/data'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jobs/$jobId': {
      id: '/jobs/$jobId'
      path: '/$jobId'
      fullPath: '/jobs/$jobId'
      preLoaderRoute: typeof JobsJobIdRouteImport
      parentRoute: typeof JobsRoute
    }
  }
}

interface JobsRouteChildren {
  JobsJobIdRoute: typeof JobsJobIdRoute
}

const JobsRouteChildren: JobsRouteChildren = {
  JobsJobIdRoute: JobsJobIdRoute,
}

const JobsRouteWithChildren = JobsRoute._addFileChildren(JobsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  DataRoute: DataRoute,
  JobsRoute: JobsRouteWithChildren,
  LoginRoute: LoginRoute,
  MotionRoute: MotionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
